//
// Generated file, do not edit! Created by nedtool 4.6 from veins/modules/heterogeneous/messages/HeterogeneousMessage.msg.
//

#ifndef _HETEROGENEOUSMESSAGE_M_H_
#define _HETEROGENEOUSMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"

#define DONTCARE 99
#define LTE 100
#define DSRC 101
#define LOCAL 102
#define OTHER 103

#define CAM_TYPE 42
#define CAM_ERROR_TYPE 43
#define BEACON_TYPE 44
// }}

/**
 * Class generated from <tt>veins/modules/heterogeneous/messages/HeterogeneousMessage.msg:22</tt> by nedtool.
 * <pre>
 * message HeterogeneousMessage extends WaveShortMessage
 * {
 *     string sourceAddress;
 *     string destinationAddress;
 *     int networkType;
 *     simtime_t sendingTime;
 * 
 * 	//zy
 * }
 * </pre>
 */
class HeterogeneousMessage : public ::WaveShortMessage
{
  protected:
    opp_string sourceAddress_var;
    opp_string destinationAddress_var;
    int networkType_var;
    simtime_t sendingTime_var;

  private:
    void copy(const HeterogeneousMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HeterogeneousMessage&);

  public:
    HeterogeneousMessage(const char *name=NULL, int kind=0);
    HeterogeneousMessage(const HeterogeneousMessage& other);
    virtual ~HeterogeneousMessage();
    HeterogeneousMessage& operator=(const HeterogeneousMessage& other);
    virtual HeterogeneousMessage *dup() const {return new HeterogeneousMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);
    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);
    virtual int getNetworkType() const;
    virtual void setNetworkType(int networkType);
    virtual simtime_t getSendingTime() const;
    virtual void setSendingTime(simtime_t sendingTime);
};

inline void doPacking(cCommBuffer *b, HeterogeneousMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, HeterogeneousMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _HETEROGENEOUSMESSAGE_M_H_

